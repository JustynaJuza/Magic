@model Magic.Models.GameViewModel

@{
    ViewBag.Title = "Game";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Welcome to the Game!</h2>
@Html.Partial("_MessagePartial")
@Html.HiddenFor(m => m.Id, new { id = "gameId"})

<div id="players-list">
    @foreach (var player in Model.Players)
    {
        <h2 class="player-name" style="color:#808080">@player.User.UserName</h2>
    }
</div>

<div class="row">
    @if(ViewBag.IsPlayer != null){
        <input type="button" id="player-ready" class="btn btn-primary" value="Ready to start" />
        //@Html.ActionLink("Start", "Start", "Game", null, new { @class = "btn btn-default", id="startGame"})
    }

    @Html.ActionLink("Pause", "Pause", "Game", null, new { @class = "btn btn-default" })
</div>

<div class="row">
    <div class="col-md-10">
        @*@Html.Partial("_ChatPartial")*@
    </div>
</div>
<div class="chat-container">
    <h3>Game</h3>
    <p class="form-horizontal form-group">
        @Html.TextBox("chat-message", null, new { id = "chat-message", @class = "form-control" })

        <input type="button" id="chat-send" class="btn btn-primary" value="Send" />
    </p>

    <div class="form-control chat-log" style="width: 500px; height: 220px; overflow: auto;">
        <ul id="discussion" style="list-style-type: none; margin:0px">
            @*@if (Model != null)
                {
                    foreach (var message in Model.MessageLog)
                    {
                        <li>@message.TimeSend.Value.ToString("hh:mm:ss") <strong>@message.Sender.UserName </strong> @message.Message</li>
                    }
                }*@
        </ul>
    </div>
</div>

@*----------------------------------------------------- SCRIPT -----------------------------------------------------*@
@Scripts.Render("~/bundles/jquerysignalR")
@Scripts.Render("~/signalr/hubs")
@Scripts.Render("~/Scripts/_ChatScript.js")
@Scripts.Render("~/Scripts/_GameScript.js")
<script>

    //$(function () {
    //    var $chatSendButton = $('#chat-send');
    //    var $chatMessage = $('#chat-message');
    //    var $chatLog = $('.chat-log');
    //    var $chatGeneralCheckbox = $('#chat-general-check');
    //    var $chatPrivateCheckbox = $('#chat-private-check');

    //    var isReady = false;
    //    var $gameId = $('#gameId');
    //    var $playerReadyButton = $('#player-ready');
    //    var $playerName = $('.player-name');

    //    // ---------------------------- HUB ---------------------------- BEGIN
    //    // Reference the auto-generated proxy for the hub.
    //    var chat = $.connection.chatHub;
    //    var game = $.connection.gameHub;

    //    // Start the connection.
    //    $.connection.hub.start().done(function () {
    //        chat.server.toggleGameSubscription($gameId.val(), true);

    //        $chatSendButton.click(function () {
    //            // Call the Send method on the hub.
    //            chat.server.send($chatMessage.val(), "");
    //            // Clear text box and reset focus for next comment.
    //            $chatMessage.val('').focus();
    //        });

    //        $playerReadyButton.click(function () {
    //            isReady = !isReady;
    //            if (isReady) {
    //                game.server.togglePlayerReady($gameId.val());
    //                $playerReadyButton.val("Not ready!");
    //            }
    //            else {
    //                game.server.togglePlayerReady("");
    //                $playerReadyButton.val("Ready to start");
    //            }
    //        });
    //    });

    //    // Hub callback delivering new messages.
    //    chat.client.addMessage = function (time, sender, senderColor, message, recipient, recipientColor) {
    //        $('#discussion').append('<li>' + time + ' <span class="chat-message-sender" style="font-weight:bold;color:' + htmlEncode(senderColor) + '">' + htmlEncode(sender)
    //            + ' </span>' + (recipient != null ? ' <span class="chat-message-recipient" style="font-weight:bold;color:' + htmlEncode(recipientColor) + '">@@' + htmlEncode(recipient)
    //            + '</span> ' : '') + htmlEncode(message) + '</li>');

    //        // Scroll to bottom message.
    //        $chatLog.animate({ scrollTop: $chatLog[0].scrollHeight }, 1000);
    //        //$chatLog.animate($chatLog.scrollTop(200), 1000); //removes scrollbars for some reason
    //    };

    //    game.client.togglePlayerReady = function (playerName, playerColor, resetPlayerReadyButton) {
    //        var $existingPlayer = $playerName.filter(function (element) {
    //            return $(this).text() == playerName;
    //        });

    //        if (playerColor) {
    //            $existingPlayer.css('color', playerColor);
    //        }
    //        else {
    //            $existingPlayer.css('color', '#808080');
    //            if (resetPlayerReadyButton) {
    //                $playerReadyButton.val("Ready to start");
    //            }
    //        }
    //    };

    //    game.client.playerJoined = function (playerName) {
    //        var $existingPlayer = $playerName.filter(function (element) {
    //            return $(this).text() == playerName;
    //        });
    //        if ($existingPlayer.length == 0) {
    //            $('#players-list').append('<h2 class="player-name" style="color:#808080">' + playerName + '</h2>');
    //        }
    //        // Refresh the variable content.
    //        $playerName = $($playerName.selector);
    //    };

    //    game.client.observerJoined = function (playerName) {
    //        var $existingPlayer = $playerName.filter(function (element) {
    //            return $(this).text() == playerName;
    //        });
    //        if ($existingPlayer.length == 0) {
    //            $('#players-list').append('<h2 class="player-name" style="color:#808080">' + playerName + '</h2>');
    //        }
    //    };

    //    game.client.userLeft = function (playerName) {
    //        var $existingPlayer = $playerName.filter(function (element) {
    //            return $(this).text() == playerName;
    //        });
    //        $existingPlayer.remove();
    //        $playerName = $($playerName.selector);

    //        $playerName.each(function () {
    //            $(this).css('color', '#808080');
    //        });
    //    };

    //    //window.onbeforeunload = function (e) {
    //    //    chat.server.activateGameChat($('#gameId').val(), false);
    //    //};
    //    // ---------------------------- HUB ---------------------------- END

    //    // Send button enabled only on chat message input.
    //    $chatSendButton.prop('disabled', true);
    //    $chatMessage.on('input', function () {
    //        if ($chatMessage.val() == '') {
    //            $chatSendButton.prop('disabled', true);
    //        }
    //        else {
    //            $chatSendButton.prop('disabled', false);
    //        }
    //    })

    //    // Send messages on enter.
    //    $chatMessage.keyup(function (e) {
    //        if (e.keyCode == 13 && $chatMessage.val().length > 0) {
    //            $chatSendButton.toggleClass('clicked');
    //            $chatSendButton.trigger('click');
    //            $chatSendButton.prop('disabled', true);
    //        }
    //    });

    //    // Provide checkboxes for hiding general/private messages.
    //    // TODO: Check why this doesn't work sometimes... Maybe bacause of dynamically added elements? Maybe because of fading scroll?
    //    $chatGeneralCheckbox.change(function () {
    //        $('#discussion li').each(function () {
    //            if ($(this).find($('.chat-message-recipient')).length == 0) {
    //                $(this).toggle();
    //            }
    //        });
    //    });
    //    $chatPrivateCheckbox.change(function () {
    //        $('#discussion li').each(function () {
    //            if ($(this).find($('.chat-message-recipient')).length != 0) {
    //                $(this).toggle();
    //            }
    //        });
    //    });
    //    //$chatGeneralCheckbox.change(function () {
    //    //    var $chatMessageList = $chatLog.find('li');
    //    //    $chatMessageList.not('.chat-message-recipient').each(function () {
    //    //            $(this).toggle();
    //    //        })
    //    //});

    //    // Enable smooth scrolling chat messages.
    //    $chatLog.scroll(function () {
    //        var lineHeightInPixels = 20;
    //        var marginSize = 10;
    //        var linesVisible = ($chatLog.height() / lineHeightInPixels).toFixed(0);
    //        var linesTotal = (($chatLog[0].scrollHeight - marginSize) / lineHeightInPixels).toFixed(0);

    //        // Get number of oldest message lines to fade out based on line height and scroll position.
    //        var linesToFadeUpper = ($chatLog.scrollTop() / lineHeightInPixels).toFixed(0);

    //        var $chatMessageList = $chatLog.find('li');
    //        // Fade upper lines out.
    //        $chatMessageList.slice(0, linesToFadeUpper).fadeTo(0, 0.01, null);
    //        // Fade visible lines in.
    //        $chatMessageList.slice(linesToFadeUpper, linesToFadeUpper + linesVisible).fadeTo(0, 1, null);
    //        // Fade lower lines out.
    //        $chatMessageList.slice(linesToFadeUpper + linesVisible, linesTotal).fadeTo(0, 0.01, null);
    //    });

    //    // Make chat sender/recipient names clickable for reply (works with dynamically added elements).
    //    $(document).on('click', '.chat-message-sender', function () {
    //        $chatMessage.val('@@' + $(this).text() + ' ');
    //        $chatMessage.focus();
    //    });
    //    $(document).on('click', '.chat-message-recipient', function () {
    //        $chatMessage.val($(this).text() + ' ');
    //        $chatMessage.focus();
    //    });

    //    // Html-encode messages for display in the page.
    //    function htmlEncode(value) {
    //        var encodedValue = $('<div />').text(value).html();
    //        return encodedValue;
    //    }
    //});

</script>